---
title: "Assignment_1"
author: "Yuying Cheng"
format: 
  html:
    embed-resources: true
    standalone: true
editor: visual
---

```{r setup}
#| echo: fenced
#| message: false
#| warning: false

library(ggplot2)
library(knitr)
library(kableExtra)
library(dplyr)
library(tidyverse)
library(stringr)
library(RColorBrewer)

fixed_palette <- "Dark2"
set_style <- function(p){
  return(p +  
           theme_classic() +
           theme(legend.position = "top") + 
           scale_color_brewer(palette = fixed_palette)+
           scale_fill_brewer(palette = fixed_palette))
}

```

# Task 4 - R basic operations

```{r task 4}
sqrt(10)

```

```{r}
log2(32)
```

```{r}
sum <- 0
for (i in seq(1, 1000)){
  sum <- sum + i
}
sum
```

```{r}
sum <- 0
for (i in seq(2, 1000, 2)){
  sum <- sum + i
}
sum
```

```{r}
choose(100, 2)
```

```{r}
choose(100, 3)
```

# Task 5 - Using R example datasets

`CO2` is data frame contains data from an experiment on cold tolerance of the grass species Echinochloa crus-galli. The experiment subjects are 6 plants originated either from Quebec or Mississippi. Their CO~2~ uptake rate was measured at several levels of ambient CO~2~ , with 2 treatment conditions - chilled and not chilled before the measurement.

```{r CO2}
#| tbl-cap: CO2
#| tbl-subcap: ["Data", "Uptake statistics"]
#| layout-ncol: 2

data(CO2)
#help(CO2)

head(CO2) %>%
  kbl() %>%
  kable_styling()

CO2 %>%
  group_by(Type) %>%
  summarise(median = median(uptake), average = mean(uptake)) %>%
  kbl() %>%
  kable_styling()
```

```{r airway}
#| layout-nrow: 1
#| message: false
#| warning: false
#| cache: true

library(airway)
data(airway)
expressed_no <- list(
  expressed = ~sum(.x > 0),
  not_expressed = ~sum(.x == 0)
)
df <- as.data.frame(assay(airway)) %>%
  summarise_all(.fun = expressed_no,
                .names = "{.col}.{.fn}") %>%
  gather(sample, count) %>%
  mutate(category = str_extract(sample, "expressed|not_expressed"),
         sample = str_remove(sample, ".expressed|.not_expressed"))
df %>%
  kbl() %>%
  kable_styling()
p <- ggplot(df, aes(x = sample, y = count, fill = category)) +
  geom_bar(stat = "identity")
set_style(p) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
```

# Task 6 - R Functions

```{r mean-median ratio}
#| layout-nrow: 2

#Calculates the ratio of mean and median of a given vector
#input: a numeric vector
#output: the ratio of mean and median of the vector
r_mean_median <- function(v){
  return(mean(v)/median(v))
}

#test
v <- list(normal = rnorm(10000, mean = 1),
          exponential = rexp(10000, rate = 1))
hist(v$normal, breaks = 100)
hist(v$exponential, breaks = 100)
lapply(v, r_mean_median)
```

```{r adjusted average}
#Calculates mean of a vectore after removing *one* maximum and *one* minimum
#input: a vector
#output: mean value after removal of one maximum and one minimum
adjusted_average <- function(v){
  x = sum(v) - min(v) - max(v)
  return(x/(length(v)-2))
}

#test
v = c(seq(1,3), rep(10,3))
v
adjusted_average(v)

```

## Pipes

Pipe is a tool predominantly for a linear sequence of operations. To use it, connection the operations with "%\>%". However because of its design, there are several situations when it is not appropriate to use pipe, including:

1.  when the number of operations is too large, piping makes it hard to debug.
2.  when there are multiple inputs and outputs.
3.  when there's a non-linear dependency structure of the operations.

## Apply family

The apply family is designed to replace the use of loops when it fits. In my work, the apply family is handy when i have several data sets but all subjected to the same pre-processing processes. For example, when i want to get the read counts from bigwig files, instead of writing loops I can lump the sets into a list and use `lapply` so I transform each bigwig file into a read count matrix with one line of code.

# Task 7 - Basic visualization

```{r magic_guys}

df <- read.csv("magic_guys.csv")
unique(df$species)
```

```{r histogram:hist }
#| layout-ncol: 2

hist(df[df$species == "jedi", "length"], breaks = 20, xlab = "length", main = "jedi")
hist(df[df$species == "sith", "length"], breaks = 20, xlab = "length", main = "sith")
```

```{r histogram/boxplot: ggplot}
#| layout-nrow: 1


p1 <- ggplot(data = df, aes(x = length, fill = species, color = species)) +
  geom_histogram(binwidth = 10, alpha = 0.8) +
  facet_grid(species ~ .)
p1 <- set_style(p1) + theme(legend.position = "none")
p1
p2 <- ggplot(data = df, aes(x = species, y = length, color = species)) +
  geom_boxplot()
p2 <- set_style(p2)
p2
```

```{r ggsave}
plots <- list(p1, p2)
names(plots) <- c("gg_hist.png", "gg_box.png")
lapply(names(plots), function(x) ggsave(x, plots[[x]]))
```

```{r microarray_data}
df <- read.table("microarray_data.tab", sep = "\t", header = T)
size_sum(df)

```

```{r na counts}
#| layout-nrow: 1

gene_na <- df %>% 
  summarise_all(~sum(is.na(.))) %>%
  gather(key = "gene", value = "count")
p1 <- ggplot(gene_na, aes(x = gene, y = count)) +
  geom_point(alpha = 0.4) +
  ylab("NA count") +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank())
p1
p2 <- ggplot(gene_na, aes(x = count)) +
  geom_density()
set_style(p2)
```

```{r find genes}
set_10 <- gene_na %>% 
  filter(count > nrow(df) * 0.1) %>%
  mutate(category = ">10%") 
set_20 <- set_10 %>%  
  filter(count > nrow(df) * 0.2) %>%
  mutate(category = ">20%") 
set_50 <- set_20 %>%
  filter(count > nrow(df) * 0.5) %>%
  mutate(category = ">50%")
set_na <- gene_na %>%
  filter(count == nrow(df))
  
p1 + 
  geom_point(data = set_10, color = brewer.pal(4, fixed_palette)[1], alpla = 0.4) +
  geom_point(data = set_20, color = brewer.pal(4, fixed_palette)[2], alpha = 0.6) +
  geom_point(data = set_50, color = brewer.pal(4, fixed_palette)[3], alpha = 0.8) +
  geom_point(data = set_na, color = brewer.pal(4, fixed_palette)[4]) +
  geom_hline(yintercept = c(0.1, 0.2, 0.5, 1) * nrow(df), color = "grey40", linetype = "dashed") 
```

```{r Imputation}
replace_with_mean <- function(v){
  v[is.na(v)] <- mean(v, na.rm = T)
}

df_imputed <- df %>%
  mutate(across(where(is.numeric), ~replace_na(., mean(., na.rm = T))))
df_imputed[1:8, 1:6]
```

```{r CO2 visualisation}
#| warning: false
#| message: false
#| layout-ncol: 3

getPallete <- colorRampPalette(brewer.pal(8, fixed_palette))
N_color <- length(unique(CO2$Plant))
p1<- ggplot(CO2, aes(x = Treatment, y = uptake, fill = Plant)) +
  geom_boxplot() 
set_style(p1) + scale_fill_manual(values = getPallete(N_color)) 
p2 <- ggplot(CO2, aes(x = conc, y = uptake, color = Treatment)) +
  geom_point() +
  geom_smooth(method = "loess", fill = NA) +
  facet_grid(Type ~ .)
set_style(p2)
p3 <- ggplot(CO2, aes(x = conc, y = uptake, color = Type)) +
  geom_point() +
  geom_smooth(method = "loess", fill = NA) +
  facet_grid(Treatment ~ .)
set_style(p3)
```

From the above plots I noticed the following:

1.  From the boxplot, plants from Quebec have a higher CO~2~ uptake rate than Mississippi, whether they were chilled or not before the measurement.
2.  Comparing the treatments, chilling decreases the CO~2~ uptake rate in general.
3.  From the second and the third plot, we can learn the relationship between ambient CO~2~ level(conc) and the CO~2~ uptake rate of the plants. This relationship among all these plants demonstates a similar trend, i.e. the CO~2~ uptake rate increases as the level of conc increases, with a deceasing rate of change, and eventually reaches a plateau.
4.  Whether or not chilled before measurement affects(decreases the uptake rate) the plants from Mississippi more than Quebec.

# Task 8 

```{r Tidybiology}
library(tidybiology)
chromosome
```
